# General parameter for Nav2
use_sim_time: false  # Set to true if running in simulation

# Map Server
map_server:
  ros__parameters:
    yaml_filename: "/home/alexander/simplebot2/ros2_workspace/config/map.yaml"  # Path to your map file

# Localization (AMCL) Parameters
amcl:
  ros__parameters:
    use_sim_time: false  # Set to true if in simulation

    # Frames must match those in slam_toolbox
    odom_frame: odom
    base_frame: base_link
    global_frame: map

    # Sensor topic used by AMCL, should match LIDAR topic from SLAM setup
    scan_topic: /scan

    # Particle filter parameters
    min_particles: 500
    max_particles: 2000
    initial_pose_x: 0.0  # Starting pose on the map
    initial_pose_y: 0.0
    initial_pose_a: 0.0
    alpha1: 0.2  # Odometry rotation noise
    alpha2: 0.2  # Odometry translation noise
    alpha3: 0.1  # Sensor model noise (for LIDAR)
    alpha4: 0.1  # Laser angular noise
    alpha5: 0.2  # Noise related to free-space detection

    # Update parameters - Determines when particles are updated
    update_min_d: 0.2   # Minimum movement in meters before updating particles
    update_min_a: 0.1   # Minimum rotation in radians before updating particles
    resample_interval: 2  # Frequency of resampling, reducing computation

    # LIDAR range parameters
    laser_min_range: 0.1
    laser_max_range: 16.0  # Matches your SLAM max_laser_range

    # AMCL Initialization & Recovery
    initial_cov_xx: 0.5  # Initial covariance in x
    initial_cov_yy: 0.5  # Initial covariance in y
    initial_cov_aa: 0.1  # Initial covariance in yaw
    recovery_alpha_fast: 0.0  # Resampling control
    recovery_alpha_slow: 0.0  # Resampling control

    # Sensor model parameters to control how AMCL trusts LIDAR measurements
    laser_model_type: "likelihood_field"
    laser_lambda_short: 0.1
    laser_max_beams: 60  # Limit the number of beams AMCL uses for localization
    laser_z_hit: 0.9     # Probability for matching observed range to map
    laser_z_short: 0.1   # Probability of a short reading
    laser_z_max: 0.05    # Probability of a max range reading
    laser_z_rand: 0.05   # Probability of random measurements

    # Pose parameters
    tf_broadcast: true  # Broadcast transform from `map` to `odom`
    transform_tolerance: 0.2  # Should match slam_toolboxâ€™s transform_timeout


# Costmap Parameters (Global and Local)
# Global costmap for path planning over the whole map
# Global costmap should be structured like this:
global_costmap:
  ros__parameters:
    use_sim_time: false
    robot_base_frame: "base_link"
    global_frame: "map"
    update_frequency: 1.0
    publish_frequency: 1.0
    resolution: 0.05
    robot_radius: 0.25
    inflation_radius: 0.5
    footprint: [[-0.3, -0.3], [0.3, -0.3], [0.3, 0.3], [-0.3, 0.3]]
    plugins: ["obstacle_layer", "inflation_layer"]
    obstacle_layer:
      plugin: "nav2_costmap_2d::ObstacleLayer"
      enabled: true
    inflation_layer:
      plugin: "nav2_costmap_2d::InflationLayer"
      enabled: true

# Local costmap should be structured similarly:
local_costmap:
  ros__parameters:
    use_sim_time: false
    global_frame: "odom"
    robot_base_frame: "base_link"
    update_frequency: 5.0
    publish_frequency: 2.0
    resolution: 0.05
    inflation_radius: 0.5
    footprint: [[-0.3, -0.3], [0.3, -0.3], [0.3, 0.3], [-0.3, 0.3]]
    plugins: ["obstacle_layer", "inflation_layer"]
    obstacle_layer:
      plugin: "nav2_costmap_2d::ObstacleLayer"
      enabled: true
    inflation_layer:
      plugin: "nav2_costmap_2d::InflationLayer"
      enabled: true


collision_monitor:
  ros__parameters:
    use_sim_time: False
    base_frame_id: "base_link"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel"
    cmd_vel_out_topic: "cmd_vel"
    transform_tolerance: 0.5
    source_timeout: 5.0
    stop_pub_timeout: 2.0
    enable_stamped_cmd_vel: False
    polygons: ["PolygonStop", "PolygonSlow"]
    PolygonStop:
      type: "polygon"
      points: "[[0.4, 0.3], [0.4, -0.3], [0.0, -0.3], [0.0, 0.3]]"
      action_type: "stop"
      min_points: 4  # max_points: 3 for Humble
      visualize: True
      polygon_pub_topic: "polygon_stop"
    PolygonSlow:
      type: "polygon"
      points: "[[0.6, 0.4], [0.6, -0.4], [0.0, -0.4], [0.0, 0.4]]"
      action_type: "slowdown"
      min_points: 4  # max_points: 3 for Humble
      slowdown_ratio: 0.3
      visualize: True
      polygon_pub_topic: "polygon_slowdown"
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"


# Planner Server (Global Planner)
planner_server:
  ros__parameters:
    expected_planner_frequency: 5.0  # Set to match your system
    use_sim_time: false
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"  # Corrected plugin name
      tolerance: 0.5
      allow_unknown: false
      use_astar: true
      max_planning_time: 2.0  # Max time to compute a path, increase if your map is large


# Controller Server (Local Planner)
controller_server:
  ros__parameters:
    use_sim_time: false
    controller_frequency: 10.0  # Control loop frequency in Hz
    min_vel_x: -0.5
    max_vel_x: 0.5
    min_vel_y: -0.5  # Negative for holonomic
    max_vel_y: 0.5
    min_speed_xy: 0.1
    max_speed_xy: 0.5
    min_theta: -1.0
    max_theta: 1.0
    goal_dist_tol: 0.25  # Goal tolerance for x, y
    goal_yaw_tol: 0.1  # Goal tolerance for yaw
    progress_timeout: 10.0  # Stop after 10 seconds without progress

    # DWB Local Planner
    controller_plugins: ["FollowPath"]
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      max_vel_x: 0.5  # Maximum linear velocity in the x direction
      min_vel_x: -0.5
      max_vel_y: 0.5  # Maximum linear velocity in the y direction (for holonomic)
      min_vel_y: -0.5
      max_speed_xy: 0.5  # Maximum translational speed
      min_speed_xy: 0.1  # Minimum translational speed
      max_rot_vel: 1.0  # Maximum rotation speed
      min_rot_vel: 0.2  # Minimum rotation speed
      vx_samples: 20  # Velocity samples in x
      vy_samples: 20  # Velocity samples in y for holonomic robot
      vtheta_samples: 20  # Velocity samples for angular velocity
      sim_time: 1.5  # Prediction time in seconds
      linear_granularity: 0.05  # Distance between points for local planner
      angular_granularity: 0.05  # Angle between points for local planner
      goal_tolerance:
        xy_goal_tolerance: 0.25  # Tolerance in meters to consider goal reached
        yaw_goal_tolerance: 0.1  # Tolerance in radians for final orientation
      progress_checker_plugin: "progress_checker/ProgressChecker"
      goal_checker_plugin: "goal_checker/GoalChecker"
      critics:
        - RotateToGoal
        - Oscillation
        - ObstacleFootprint
        - PreferForward
        - PathAlign
        - PathDist
        - GoalAlign

# Behavior Tree (BT) Navigator
bt_navigator:
  ros__parameters:
    use_sim_time: false
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"  # Default behavior tree XML file
